// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"ginAdmin/internal/app/api"
	"ginAdmin/internal/app/model/gormx/repo"
	"ginAdmin/internal/app/mqttApi"
	"ginAdmin/internal/app/mqttTopic"
	"ginAdmin/internal/app/router"
	"ginAdmin/internal/app/service"
)

// Injectors from wire.go:

// BuildInjector 生成注入器
func BuildInjector() (*Injector, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := InitGormDB()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	demo := &repo.Demo{
		DB: db,
	}
	serviceDemo := &service.Demo{
		DemoModel: demo,
	}
	apiDemo := &api.Demo{
		DemoSrv: serviceDemo,
	}
	user := &repo.User{
		DB: db,
	}
	login := &service.Login{
		Auth:      auther,
		UserModel: user,
	}
	apiLogin := &api.Login{
		LoginSrv: login,
	}
	trans := &repo.Trans{
		DB: db,
	}
	serviceUser := &service.User{
		TransModel: trans,
		UserModel:  user,
	}
	apiUser := &api.User{
		UserSrv: serviceUser,
	}
	im := &service.IM{
		UserModel: user,
	}
	apiIM := &api.IM{
		IMSrv: im,
	}
	routerRouter := &router.Router{
		Auth:     auther,
		DemoAPI:  apiDemo,
		LoginAPI: apiLogin,
		UserAPI:  apiUser,
		IMApi:    apiIM,
	}
	engine := InitGinEngine(routerRouter)
	mqttApiUser := &mqttApi.User{
		UserSrv:  serviceUser,
		LoginSrv: login,
	}
	manifest := &mqttApi.Manifest{
		UserSrv: serviceUser,
	}
	userFriend := &repo.UserFriend{
		DB: db,
	}
	friend := &service.Friend{
		UserModel:       user,
		UserFriendModel: userFriend,
	}
	mqttApiFriend := &mqttApi.Friend{
		FriendSrc: friend,
		UserSrv:   serviceUser,
	}
	group := &repo.Group{
		DB: db,
	}
	groupMember := &repo.GroupMember{
		DB: db,
	}
	serviceGroup := &service.Group{
		TransModel:       trans,
		GroupModel:       group,
		GroupMemberModel: groupMember,
	}
	mqttApiGroup := &mqttApi.Group{
		GroupSrc: serviceGroup,
		UserSrv:  serviceUser,
	}
	topic := mqttTopic.Topic{
		UserAPI:     mqttApiUser,
		ManifestAPI: manifest,
		FriendAPI:   mqttApiFriend,
		GroupAPI:    mqttApiGroup,
	}
	injector := &Injector{
		Engine: engine,
		Auth:   auther,
		Topic:  topic,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
