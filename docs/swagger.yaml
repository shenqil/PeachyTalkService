definitions:
  schema.Demo:
    properties:
      code:
        description: 编号
        type: string
      created_at:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: string
      id:
        description: 唯一标识
        type: string
      memo:
        description: 备注
        type: string
      name:
        description: 名称
        type: string
      status:
        description: 状态(1:启用 2:停用)
        type: integer
      updated_at:
        description: 更新时间
        type: string
    required:
    - code
    - name
    - status
    type: object
  schema.ErrorItem:
    properties:
      code:
        description: 错误码
        type: integer
      message:
        description: 错误信息
        type: string
    type: object
  schema.ErrorResult:
    properties:
      error:
        $ref: '#/definitions/schema.ErrorItem'
        description: 错误项
    type: object
  schema.IDResult:
    properties:
      id:
        type: string
    type: object
  schema.ListResult:
    properties:
      list:
        type: object
      pagination:
        $ref: '#/definitions/schema.PaginationResult'
    type: object
  schema.LoginCaptcha:
    properties:
      captchaId:
        description: 验证码ID
        type: string
    type: object
  schema.LoginParam:
    properties:
      captchaCode:
        description: 验证码
        type: string
      captchaId:
        description: 验证码ID
        type: string
      password:
        description: 密码(md5加密)
        type: string
      userName:
        description: 用户名
        type: string
    required:
    - captchaCode
    - captchaId
    - password
    - userName
    type: object
  schema.LoginTokenInfo:
    properties:
      accessToken:
        description: 访问令牌
        type: string
      expiresAt:
        description: 令牌到期时间戳
        type: integer
      tokenType:
        description: 令牌类型
        type: string
    type: object
  schema.Menu:
    properties:
      actions:
        description: 动作列表
        items:
          $ref: '#/definitions/schema.MenuAction'
        type: array
      createdAt:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: string
      icon:
        description: 菜单图标
        type: string
      id:
        description: 唯一标识
        type: string
      memo:
        description: 备注
        type: string
      name:
        description: 菜单名称
        type: string
      parentId:
        description: 父级ID
        type: string
      parentPath:
        description: 父级路径
        type: string
      router:
        description: 访问路由
        type: string
      sequence:
        description: 排序值
        type: integer
      showStatus:
        description: 显示状态(1:显示 2:隐藏)
        type: integer
      status:
        description: 状态(1:启用 2:禁用)
        type: integer
      updatedAt:
        description: 更新时间
        type: string
    required:
    - name
    - showStatus
    - status
    type: object
  schema.MenuAction:
    properties:
      code:
        description: 动作编号
        type: string
      id:
        description: 唯一标识
        type: string
      menuId:
        description: 菜单ID
        type: string
      name:
        description: 动作名称
        type: string
      resources:
        description: 资源列表
        items:
          $ref: '#/definitions/schema.MenuActionResource'
        type: array
    required:
    - code
    - menuId
    - name
    type: object
  schema.MenuActionResource:
    properties:
      actionId:
        description: 菜单动作ID
        type: string
      id:
        description: 唯一标识
        type: string
      method:
        description: 资源请求方式(支持正则)
        type: string
      path:
        description: 资源请求路径（支持/:id匹配）
        type: string
    required:
    - method
    - path
    type: object
  schema.MenuTree:
    properties:
      actions:
        description: 动作列表
        items:
          $ref: '#/definitions/schema.MenuAction'
        type: array
      children:
        description: 子级树
        items:
          $ref: '#/definitions/schema.MenuTree'
        type: array
      icon:
        description: 菜单图标
        type: string
      id:
        description: 唯一标识
        type: string
      name:
        description: 菜单名称
        type: string
      parentId:
        description: 父级ID
        type: string
      parentPath:
        description: 父级路径
        type: string
      router:
        description: 访问路由
        type: string
      sequence:
        description: 排序值
        type: integer
      showStatus:
        description: 显示状态(1:显示 2:隐藏)
        type: integer
      status:
        description: 状态(1:启用 2:禁用)
        type: integer
    type: object
  schema.PaginationResult:
    properties:
      current:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  schema.Role:
    properties:
      createdAt:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: string
      id:
        description: 唯一标识
        type: string
      memo:
        description: 备注
        type: string
      name:
        description: 角色名称
        type: string
      roleMenus:
        description: 角色菜单列表
        items:
          $ref: '#/definitions/schema.RoleMenu'
        type: array
      sequence:
        description: 排序值
        type: integer
      status:
        description: 状态(1:启用 2:禁用)
        type: integer
      updatedAt:
        description: 更新时间
        type: string
    required:
    - name
    - roleMenus
    - status
    type: object
  schema.RoleMenu:
    properties:
      actionId:
        description: 动作ID
        type: string
      id:
        description: 唯一标识
        type: string
      menuId:
        description: 菜单ID
        type: string
      roleId:
        description: 角色ID
        type: string
    required:
    - actionId
    - menuId
    - roleId
    type: object
  schema.StatusResult:
    properties:
      status:
        description: 状态(OK)
        type: string
    type: object
  schema.UpdatePasswordParam:
    properties:
      newPassword:
        description: 新密码(md5加密)
        type: string
      oldPassword:
        description: 旧密码(md5加密)
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  schema.User:
    properties:
      created_at:
        description: 创建时间
        type: string
      creator:
        description: 创建者
        type: string
      email:
        description: 邮箱
        type: string
      id:
        description: 唯一标识
        type: string
      password:
        description: 密码
        type: string
      phone:
        description: 手机号
        type: string
      real_name:
        description: 真实姓名
        type: string
      status:
        description: 用户状态(1:启用 2:停用)
        type: integer
      user_name:
        description: 用户名
        type: string
      user_roles:
        description: 角色授权
        items:
          $ref: '#/definitions/schema.UserRole'
        type: array
    required:
    - real_name
    - status
    - user_name
    - user_roles
    type: object
  schema.UserLoginInfo:
    properties:
      realName:
        description: 真实姓名
        type: string
      roles:
        description: 角色列表
        items:
          $ref: '#/definitions/schema.Role'
        type: array
      userId:
        description: 用户ID
        type: string
      userName:
        description: 用户名
        type: string
    type: object
  schema.UserRole:
    properties:
      id:
        description: 唯一标识
        type: string
      role_id:
        description: 角色ID
        type: string
      user_id:
        description: 用户ID
        type: string
    type: object
  schema.UserShow:
    properties:
      created_at:
        description: 创建时间
        type: string
      email:
        description: 邮箱
        type: string
      id:
        description: 唯一标识
        type: string
      phone:
        description: 手机号
        type: string
      real_name:
        description: 真实姓名
        type: string
      roles:
        description: 授权角色列表
        items:
          $ref: '#/definitions/schema.Role'
        type: array
      status:
        description: 用户状态(1:启用 2:停用)
        type: integer
      user_name:
        description: 用户名
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/demos:
    get:
      parameters:
      - default: 1
        description: 分页索引
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: 分页大小
        in: query
        name: pageSize
        required: true
        type: integer
      - description: 查询值
        in: query
        name: queryValue
        type: string
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.Demo'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询数据
      tags:
      - Demo
    post:
      parameters:
      - description: 创建数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Demo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.IDResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 创建数据
      tags:
      - Demo
  /api/v1/demos/{id}:
    delete:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 删除数据
      tags:
      - Demo
    get:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Demo'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "404":
          description: '{error:{code:0,message:资源不存在}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询指定数据
      tags:
      - Demo
    put:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      - description: 更新数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Demo'
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 更新数据
      tags:
      - Demo
  /api/v1/demos/{id}/disable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 禁用数据
      tags:
      - Demo
  /api/v1/demos/{id}/enable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 启用数据
      tags:
      - Demo
  /api/v1/menus:
    get:
      parameters:
      - default: 1
        description: 分页索引
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: 分页大小
        in: query
        name: pageSize
        required: true
        type: integer
      - description: 查询值
        in: query
        name: queryValue
        type: string
      - description: 状态(1:启用 2:禁用)
        in: query
        name: status
        type: integer
      - description: 显示状态(1:显示 2:隐藏)
        in: query
        name: showStatus
        type: integer
      - description: 父级ID
        in: query
        name: parentID
        type: string
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.Menu'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询数据
      tags:
      - 菜单管理
    post:
      parameters:
      - description: 创建数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Menu'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.IDResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 创建数据
      tags:
      - 菜单管理
  /api/v1/menus.tree:
    get:
      parameters:
      - description: 状态(1:启用 2:禁用)
        in: query
        name: status
        type: integer
      - description: 父级ID
        in: query
        name: parentID
        type: string
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.MenuTree'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询菜单树
      tags:
      - 菜单管理
  /api/v1/menus/{id}:
    delete:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 删除数据
      tags:
      - 菜单管理
    get:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Menu'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "404":
          description: '{error:{code:0,message:资源不存在}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询指定数据
      tags:
      - 菜单管理
    put:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      - description: 更新数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Menu'
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 更新数据
      tags:
      - 菜单管理
  /api/v1/menus/{id}/disable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 禁用数据
      tags:
      - 菜单管理
  /api/v1/menus/{id}/enable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 启用数据
      tags:
      - 菜单管理
  /api/v1/pub/current/menutree:
    get:
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.MenuTree'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询当前用户菜单树
      tags:
      - 登录管理
  /api/v1/pub/current/password:
    put:
      parameters:
      - description: 请求参数
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.UpdatePasswordParam'
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 更新个人密码
      tags:
      - 登录管理
  /api/v1/pub/current/user:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.UserLoginInfo'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 获取当前用户信息
      tags:
      - 登录管理
  /api/v1/pub/login:
    post:
      parameters:
      - description: 请求参数
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.LoginParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.LoginTokenInfo'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      summary: 用户登录
      tags:
      - 登录管理
  /api/v1/pub/login/captcha:
    get:
      parameters:
      - description: 验证码ID
        in: query
        name: id
        required: true
        type: string
      - description: 重新加载
        in: query
        name: reload
        type: string
      produces:
      - image/png
      responses:
        "200":
          description: 图形验证码
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      summary: 响应图形验证码
      tags:
      - 登录管理
  /api/v1/pub/login/captchaid:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.LoginCaptcha'
      summary: 获取验证码信息
      tags:
      - 登录管理
  /api/v1/pub/login/exit:
    post:
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
      summary: 用户登出
      tags:
      - 登录管理
  /api/v1/pub/refresh-token:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.LoginTokenInfo'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 刷新令牌
      tags:
      - 登录管理
  /api/v1/roles:
    get:
      parameters:
      - default: 1
        description: 分页索引
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: 分页大小
        in: query
        name: pageSize
        required: true
        type: integer
      - description: 查询值
        in: query
        name: queryValue
        type: string
      - description: 状态(1:启用 2:禁用)
        in: query
        name: status
        type: integer
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.Role'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询数据
      tags:
      - 角色管理
    post:
      parameters:
      - description: 创建数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Role'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.IDResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 创建数据
      tags:
      - 角色管理
  /api/v1/roles.select:
    get:
      parameters:
      - description: 查询值
        in: query
        name: queryValue
        type: string
      - description: 状态(1:启用 2:禁用)
        in: query
        name: status
        type: integer
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.Role'
                  type: array
              type: object
        "400":
          description: '{error:{code:0,message:未知的查询类型}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询选择数据
      tags:
      - 角色管理
  /api/v1/roles/{id}:
    delete:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 删除数据
      tags:
      - 角色管理
    get:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Role'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "404":
          description: '{error:{code:0,message:资源不存在}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询指定数据
      tags:
      - 角色管理
    put:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      - description: 更新数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.Role'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Role'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 更新数据
      tags:
      - 角色管理
  /api/v1/roles/{id}/disable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 禁用数据
      tags:
      - 角色管理
  /api/v1/roles/{id}/enable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 启用数据
      tags:
      - 角色管理
  /api/v1/users:
    get:
      parameters:
      - default: 1
        description: 分页索引
        in: query
        name: current
        required: true
        type: integer
      - default: 10
        description: 分页大小
        in: query
        name: pageSize
        required: true
        type: integer
      - description: 查询值
        in: query
        name: queryValue
        type: string
      - description: 角色ID(多个以英文逗号分隔)
        in: query
        name: roleIDs
        type: string
      - description: 状态(1:启用 2:停用)
        in: query
        name: status
        type: integer
      responses:
        "200":
          description: 查询结果
          schema:
            allOf:
            - $ref: '#/definitions/schema.ListResult'
            - properties:
                list:
                  items:
                    $ref: '#/definitions/schema.UserShow'
                  type: array
              type: object
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询数据
      tags:
      - 用户管理
    post:
      parameters:
      - description: 创建数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.IDResult'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 创建数据
      tags:
      - 用户管理
  /api/v1/users/{id}:
    delete:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 删除数据
      tags:
      - 用户管理
    get:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.User'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "404":
          description: '{error:{code:0,message:资源不存在}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 查询指定数据
      tags:
      - 用户管理
    put:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      - description: 更新数据
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.User'
        "400":
          description: '{error:{code:0,message:无效的请求参数}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 更新数据
      tags:
      - 用户管理
  /api/v1/users/{id}/disable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 禁用数据
      tags:
      - 用户管理
  /api/v1/users/{id}/enable:
    patch:
      parameters:
      - description: 唯一标识
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: '{status:OK}'
          schema:
            $ref: '#/definitions/schema.StatusResult'
        "401":
          description: '{error:{code:0,message:未授权}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
        "500":
          description: '{error:{code:0,message:服务器错误}}'
          schema:
            $ref: '#/definitions/schema.ErrorResult'
      security:
      - ApiKeyAuth: []
      summary: 启用数据
      tags:
      - 用户管理
swagger: "2.0"
